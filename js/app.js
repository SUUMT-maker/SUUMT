// üîê Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ Í¥ÄÎ†® Ìï®ÏàòÎì§

// 1Ô∏è‚É£ Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ Ìï®Ïàò
async function loginWithKakao() {
  const { data, error } = await window.supabaseClient.auth.signInWithOAuth({
    provider: 'kakao',
    options: { redirectTo: window.location.origin }
  });
  if (error) console.error('‚ùå Kakao login failed:', error);
}

// 2Ô∏è‚É£ Î≤ÑÌäº ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏
document.addEventListener('DOMContentLoaded', function() {
  const loginBtn = document.getElementById('loginKakaoBtn');
  if (loginBtn) {
    loginBtn.onclick = loginWithKakao;
  }
});

// 3Ô∏è‚É£ Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú Í∞êÏßÄ
window.supabaseClient.auth.onAuthStateChange((event, session) => {
  if (event === 'SIGNED_IN' && session?.user) {
    console.log('‚úÖ Kakao user signed in:', session.user);
    console.log('üë§ User ID:', session.user.id);
    window.currentUserId = session.user.id;

    // ÌôîÎ©¥ Ï†ÑÌôò
    document.getElementById('loginScreen').style.display = 'none';
    document.getElementById('homeScreen').style.display = 'block';
  }
});

// 4Ô∏è‚É£ ÌéòÏù¥ÏßÄ ÏÉàÎ°úÍ≥†Ïπ® Ïãú ÏÑ∏ÏÖò ÌôïÏù∏
(async function checkSession() {
  const { data: { session } } = await window.supabaseClient.auth.getSession();
  if (session?.user) {
    console.log('‚úÖ Session found:', session.user);
    console.log('üë§ User ID:', session.user.id);
    window.currentUserId = session.user.id;
    document.getElementById('loginScreen').style.display = 'none';
    document.getElementById('homeScreen').style.display = 'block';
  }
})();

// üè† Î©îÏù∏ Ïï± Í¥ÄÎ†® Ìï®ÏàòÎì§

// Supabase ÏÑ§Ï†ï (Google Apps Script ÎåÄÏ≤¥)
const SUPABASE_URL = 'https://rfqbzibewzvqopqgovbc.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJmcWJ6aWJld3p2cW9wcWdvdmJjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQzNzIwNTMsImV4cCI6MjA2OTk0ODA1M30.nAXbnAFe4jM7F56QN4b42NhwNJG_iuSXOVM5zC72Bs4';

// üîÑ ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò ÏÉÅÌÉú ÌôïÏù∏
function checkMigrationStatus() {
    console.log('üîÑ Google Apps Script ‚Üí Supabase ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò ÏÉÅÌÉú ÌôïÏù∏');
    console.log('‚úÖ SCRIPT_URL ‚Üí SUPABASE_URLÎ°ú ÍµêÏ≤¥ ÏôÑÎ£å');
    console.log('‚úÖ getTrainerAdvice Ìï®Ïàò ‚Üí Supabase Edge Function Ìò∏Ï∂úÎ°ú Î≥ÄÍ≤Ω ÏôÑÎ£å');
    console.log('‚úÖ supabase-client.js Ï∂îÍ∞Ä ÏôÑÎ£å');
    
    return {
        migrationComplete: true,
        timestamp: new Date().toISOString(),
        oldEndpoint: 'Google Apps Script',
        newEndpoint: 'Supabase Edge Functions',
        functions: ['ai-advice']
    };
}

// üî• ÏÉàÎ°úÏö¥ Í∏∞Îä•: ÏÇ¨ÌöåÏ†Å Ï¶ùÎ™Ö Îç∞Ïù¥ÌÑ∞
const SOCIAL_PROOF_REVIEWS = [
    {
        text: "Ïà®Ìä∏Î°ú ÌèêÌôúÎüâÏù¥ Ï†ïÎßê ÎäòÏóàÏñ¥Ïöî! Í≥ÑÎã® Ïò§Î•º Îïå Ïà®Ïù¥ Îçú Ï∞®Ïöî üëç",
        author: "ÍπÄÏÉÅÏö∞",
        rating: "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê",
        avatar: "ÍπÄ"
    },
    {
        text: "Ïö¥Îèô ÌõÑ Ìò∏Ìù°Ïù¥ Ìõ®Ïî¨ Ìé∏Ìï¥Ï°åÏäµÎãàÎã§. Íæ∏Ï§ÄÌûà ÌïòÎãàÍπå ÌôïÏã§Ìûà Îã¨ÎùºÏ†∏Ïöî!",
        author: "Î∞ïÏòÅÌù¨",
        rating: "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê",
        avatar: "Î∞ï"
    },
    {
        text: "Ï≤òÏùåÏóî ÌûòÎì§ÏóàÎäîÎç∞ Ïù¥Ï†ú 2Îã®Í≥ÑÍπåÏßÄ Ìï† Ïàò ÏûàÏñ¥Ïöî. ÏÑ±Ï∑®Í∞ê ÏµúÍ≥†!",
        author: "Ïù¥ÎØºÏàò",
        rating: "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê",
        avatar: "Ïù¥"
    },
    {
        text: "Ïà®Ìä∏ Ïï± ÎçïÎ∂ÑÏóê Îß§Ïùº Íæ∏Ï§ÄÌûà ÌïòÍ≤å ÎêòÎÑ§Ïöî. UIÎèÑ ÏòàÏÅòÍ≥† Ïû¨ÎØ∏ÏûàÏñ¥Ïöî!",
        author: "Ï†ïÌïòÎÇò",
        rating: "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê",
        avatar: "Ï†ï"
    },
    {
        text: "Ìò∏Ìù°Í∑º Ïö¥ÎèôÏù¥ Ïù¥Î†áÍ≤å Ï§ëÏöîÌïú Ï§Ñ Î™∞ÎûêÏñ¥Ïöî. Ïà®Ìä∏ Í∞ïÎ†• Ï∂îÏ≤úÌï©ÎãàÎã§!",
        author: "ÏµúÏ§ÄÌò∏",
        rating: "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê",
        avatar: "Ïµú"
    }
];

// üéÆ Î∞∞ÏßÄ ÏãúÏä§ÌÖú Îç∞Ïù¥ÌÑ∞
const BADGES_CONFIG = [
    {
        id: 'first_step',
        name: 'Ï≤´ Í±∏Ïùå',
        icon: 'üå±',
        description: 'Ï≤´ Î≤àÏß∏ Ìò∏Ìù° Ìä∏Î†àÏù¥Îãù ÏôÑÎ£å',
        hint: 'Ï≤´ Ìä∏Î†àÏù¥Îãù',
        condition: (stats) => stats.totalExercises >= 1
    },
    {
        id: 'daily_warrior',
        name: 'ÏùºÏùº Ï†ÑÏÇ¨',
        icon: '‚ö°',
        description: 'ÌïòÎ£®Ïóê 3Î≤à Ïù¥ÏÉÅ Ìä∏Î†àÏù¥Îãù ÏôÑÎ£å',
        hint: 'ÌïòÎ£® 3Ìöå',
        condition: (stats) => getTodayExerciseCount() >= 3
    },
    {
        id: 'week_master',
        name: 'Ï£ºÍ∞Ñ ÎßàÏä§ÌÑ∞',
        icon: 'üî•',
        description: '7Ïùº Ïó∞ÏÜç Ìä∏Î†àÏù¥Îãù ÏôÑÎ£å',
        hint: '7Ïùº Ïó∞ÏÜç',
        condition: (stats) => stats.consecutiveDays >= 7
    },
    {
        id: 'breath_collector',
        name: 'Ìò∏Ìù° ÏàòÏßëÍ∞Ä',
        icon: 'ü´Å',
        description: 'Ï¥ù 1000Ìöå Ìò∏Ìù° Îã¨ÏÑ±',
        hint: 'Ï¥ù 1000Ìöå',
        condition: (stats) => stats.totalBreaths >= 1000
    },
    {
        id: 'endurance_king',
        name: 'ÏßÄÍµ¨Î†• Ïôï',
        icon: 'üëë',
        description: '50Ìöå Ìä∏Î†àÏù¥Îãù ÏôÑÏ£º',
        hint: '50Ìöå ÏôÑÏ£º',
        condition: (stats) => stats.totalExercises >= 50
    },
    {
        id: 'high_intensity',
        name: 'Í≥†Í∞ïÎèÑ ÎèÑÏ†ÑÏûê',
        icon: 'üí™',
        description: 'Îì§Ïà®/ÎÇ†Ïà® Î™®Îëê 4Îã®Í≥Ñ Ïù¥ÏÉÅ Îã¨ÏÑ±',
        hint: 'Í≥†Í∞ïÎèÑ Îã¨ÏÑ±',
        condition: (stats) => getMaxIntensityEver().inhale >= 4 && getMaxIntensityEver().exhale >= 4
    },
    {
        id: 'perfect_month',
        name: 'ÏôÑÎ≤ΩÌïú Îã¨',
        icon: 'üåü',
        description: '30Ïùº Ïó∞ÏÜç Ìä∏Î†àÏù¥Îãù ÏôÑÎ£å',
        hint: '30Ïùº Ïó∞ÏÜç',
        condition: (stats) => stats.consecutiveDays >= 30
    },
    {
        id: 'speed_demon',
        name: 'Ïä§ÌîºÎìú Îç∞Î™¨',
        icon: 'üöÄ',
        description: 'Ìú¥ÏãùÏãúÍ∞Ñ ÏóÜÏù¥ 2ÏÑ∏Ìä∏ Ïó∞ÏÜç ÏôÑÏ£º',
        hint: 'Ìú¥Ïãù Ïä§ÌÇµ',
        condition: (stats) => getSkippedRestCount() >= 1 && stats.totalExercises >= 2
    },
    {
        id: 'consistency_hero',
        name: 'Íæ∏Ï§ÄÌï®Ïùò ÏòÅÏõÖ',
        icon: 'üéØ',
        description: '100Ìöå Ìä∏Î†àÏù¥Îãù ÏôÑÏ£º',
        hint: '100Ìöå ÏôÑÏ£º',
        condition: (stats) => stats.totalExercises >= 100
    },
    {
        id: 'breath_master',
        name: 'Ìò∏Ìù° ÎßàÏä§ÌÑ∞',
        icon: 'üßò',
        description: 'Ï¥ù 5000Ìöå Ìò∏Ìù° Îã¨ÏÑ±',
        hint: 'Ï¥ù 5000Ìöå',
        condition: (stats) => stats.totalBreaths >= 5000
    },
    {
        id: 'legend',
        name: 'Î†àÏ†ÑÎìú',
        icon: 'üèÜ',
        description: 'Î™®Îì† Ï°∞Í±¥ÏùÑ Îã¨ÏÑ±Ìïú ÏßÑÏ†ïÌïú ÎßàÏä§ÌÑ∞',
        hint: '??? ÎØ∏Ïä§ÌÑ∞Î¶¨',
        condition: (stats) => {
            const earnedBadges = getEarnedBadges();
            return earnedBadges.length >= 14; // ÏûêÍ∏∞ ÏûêÏã† Ï†úÏô∏Ìïú Î™®Îì† Î∞∞ÏßÄ
        }
    },
    {
        id: 'quiz_explorer',
        name: 'ÌÄ¥Ï¶à ÌÉêÌóòÍ∞Ä',
        icon: 'üîç',
        description: 'ÌÄ¥Ï¶à 2Î¨∏Ï†úÎ•º Î™®Îëê Ï†ïÎãµÏúºÎ°ú ÎßûÌòîÏñ¥Ïöî',
        hint: 'ÌÄ¥Ï¶à 2Î¨∏Ï†ú',
        condition: (stats) => getQuizPerfectCount() >= 1
    },
    {
        id: 'quiz_perfectionist',
        name: 'ÌÄ¥Ï¶à ÏôÑÎ≤ΩÏ£ºÏùòÏûê',
        icon: 'üéØ',
        description: '3Î≤à Ïó∞ÏÜçÏúºÎ°ú ÌÄ¥Ï¶àÎ•º ÏôÑÎ≤ΩÌïòÍ≤å ÌíÄÏóàÏñ¥Ïöî',
        hint: '3Î≤à Ïó∞ÏÜç ÏôÑÎ≤Ω',
        condition: (stats) => getConsecutivePerfectCount() >= 3
    },
    {
        id: 'quiz_master',
        name: 'ÌÄ¥Ï¶à ÎßàÏä§ÌÑ∞',
        icon: 'üß†',
        description: '6Í∞ÄÏßÄ ÌÄ¥Ï¶à Î¨∏Ï†úÎ•º Î™®Îëê Í≤ΩÌóòÌñàÏñ¥Ïöî',
        hint: 'Î™®Îì† Î¨∏Ï†ú',
        condition: (stats) => getSolvedQuestionsCount() >= 6
    },
    {
        id: 'early_bird',
        name: 'ÏùºÏ∞ç ÏùºÏñ¥ÎÇòÎäî ÏÉà',
        icon: 'üåÖ',
        description: 'Ïò§Ï†Ñ 6Ïãú Ïù¥Ï†ÑÏóê Ìä∏Î†àÏù¥Îãù ÏôÑÎ£å',
        hint: 'ÏÉàÎ≤Ω Ïö¥Îèô',
        condition: (stats) => getEarlyMorningCount() >= 1
    }
];

// Ï†ÑÏó≠ Î≥ÄÏàòÎì§
let currentSet = 1;
let currentBreath = 1;
let exerciseStartTime;
let breathingTimer;
let restTimer;
let isPaused = false;
let isAborted = false;
let breathingPhase = 'inhale';

let resistanceSettings = {
    inhale: 1,
    exhale: 1
};

let userFeedback = null;

// üéÆ ÌÄ¥Ï¶à ÏãúÏä§ÌÖú Ï†ÑÏó≠ Î≥ÄÏàò
let currentQuizQuestion = 0;
let quizCorrectAnswers = 0;
let selectedQuestions = []; // ÏÑ†ÌÉùÎêú 2Î¨∏Ï†ú
let solvedQuestions = []; // ÏßÄÍ∏àÍπåÏßÄ Ìëº Î¨∏Ï†úÎì§ (Î∞∞ÏßÄÏö©)
let quizStartTime = null;

// üî• Î¶¨Î∑∞ Ï∫êÎü¨ÏÖÄ Ï†ÑÏó≠ Î≥ÄÏàò
let reviewCarouselInterval;
let currentReviewIndex = 0;

// üîß Ï†ÑÏó≠ Ìú¥Ïãù ÌÉÄÏù¥Î®∏
let globalRestTimer = null;
let globalRestTime = 120;

// üéØ ÌÄ¥Ï¶à Ïò§Ìçº ÌÉÄÏù¥Î®∏
let quizOfferTimer = null;

// ÌïòÎã® ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Î∞î Ï†úÏñ¥ Ìï®ÏàòÎì§
function showBottomNav() {
    const nav = document.getElementById('bottomNavigation');
    if (nav) nav.style.display = 'flex';
}

function hideBottomNav() {
    const nav = document.getElementById('bottomNavigation');
    if (nav) nav.style.display = 'none';
}

// üìí Records Í¥ÄÎ†® Ìï®ÏàòÎì§
async function fetchAiAdviceForDate(date) {
    const client = window.supabaseClient;
    if (!client) return null;

    try {
        // Step 1: Fetch session IDs for the date
        const { data: sessions, error: sessionError } = await client
            .from('exercise_sessions')
            .select('id')
            .eq('exercise_date', date);

        if (sessionError || !sessions?.length) {
            console.warn('‚ö†Ô∏è No exercise sessions found for', date);
            return null;
        }

        const sessionIds = sessions.map(s => s.id);

        // Step 2: Fetch AI advice with summary first
        const { data: advices, error: adviceError } = await client
            .from('ai_advice')
            .select('summary, comprehensive_advice, session_id')
            .in('session_id', sessionIds)
            .order('created_at', { ascending: false })
            .limit(1);

        if (adviceError || !advices?.length) {
            console.warn('‚ö†Ô∏è No AI advice found for', date);
            return null;
        }

        const advice = advices[0];
        const result = advice.summary || advice.comprehensive_advice || null;
        
        console.log('‚úÖ AI advice fetched for', date, ':', result);
        return result;

    } catch (err) {
        console.error('‚ùå Error fetching AI advice:', err);
        return null;
    }
}

async function fetchExerciseSessions() {
    const client = window.supabaseClient;
    if (!client) {
        console.error('‚ùå Supabase client not initialized');
        return [];
    }

    try {
        const { data, error } = await client
            .from('exercise_sessions')
            .select('*')
            .order('exercise_date', { ascending: true });

        if (error) {
            console.error('‚ùå Error fetching sessions:', error);
            return [];
        }

        console.log(`üìí ${data.length} sessions fetched`, data);
        return data;
    } catch (err) {
        console.error('‚ùå Unexpected fetch error:', err);
        return [];
    }
}

function transformSessionToRecord(session) {
    return {
        date: session.exercise_date,
        sets: session.completed_sets,
        duration: session.exercise_time,
        avg_resistance: Math.round((session.inhale_resistance + session.exhale_resistance) / 2),
        ai_summary: session.is_aborted ? "Ïö¥ÎèôÏùÑ Ï§ëÎã®ÌïòÏÖ®ÎÑ§Ïöî. Îã§ÏùåÏóêÎäî ÏôÑÏ£ºÌï¥Î≥¥ÏÑ∏Ïöî!" : "Ïö¥Îèô ÏôÑÎ£å! Íæ∏Ï§ÄÌûà Ìï¥Î¥ÖÏãúÎã§."
    };
}

function renderCalendar(sessions) {
    const calendarContainer = document.querySelector('.records-calendar');
    const records = sessions.map(transformSessionToRecord);
    const days = [...new Set(records.map(r => r.date))];

    let html = '<table class="calendar"><tr>';
    for (let d = 1; d <= 30; d++) {
        const dayStr = d.toString().padStart(2, '0');
        const fullDate = `2025-08-${dayStr}`; // FIXME: month dynamic
        const hasRecord = days.includes(fullDate);
        html += `<td class="${hasRecord ? 'has-record' : ''}" data-day="${fullDate}">${d}</td>`;
        if (d % 7 === 0) html += '</tr><tr>';
    }
    html += '</tr></table>';
    calendarContainer.innerHTML = html;

    calendarContainer.querySelectorAll('td').forEach(td => {
        td.addEventListener('click', async () => {
            const day = td.getAttribute('data-day');
            const selected = records.filter(r => r.date === day && r.sets > 0);
            await renderRecordSummary(selected[0]);
        });
    });
}

async function renderRecordSummary(record) {
    const dateEl = document.getElementById('selectedDate');
    const summaryEl = document.getElementById('recordSummaryList');
    const adviceEl = document.getElementById('aiAdviceSummary');

    if (!record) {
        dateEl.innerText = '-';
        summaryEl.innerHTML = '<li>Ïö¥Îèô Í∏∞Î°ù ÏóÜÏùå</li>';
        adviceEl.innerText = 'Ïö¥Îèô Í∏∞Î°ùÏù¥ ÏóÜÏñ¥ AI Ï°∞Ïñ∏ÏùÑ Ï†úÍ≥µÌï† Ïàò ÏóÜÏäµÎãàÎã§.';
        return;
    }

    dateEl.innerText = record.date;
    summaryEl.innerHTML = `
        <li>Ïö¥Îèô ÏÑ∏Ìä∏ Ïàò: ${record.sets}</li>
        <li>Ï¥ù Ïö¥Îèô ÏãúÍ∞Ñ: ${record.duration}</li>
        <li>ÌèâÍ∑† Ï†ÄÌï≠ Í∞ïÎèÑ: ${record.avg_resistance}</li>
    `;

    // Fetch latest AI advice for the selected date
    console.log('üîç Fetching AI advice for date:', record.date);
    const advice = await fetchAiAdviceForDate(record.date);
    adviceEl.innerText = advice || 'Ïö¥Îèô Í∏∞Î°ùÏù¥ ÏóÜÏñ¥ AI Ï°∞Ïñ∏ÏùÑ Ï†úÍ≥µÌï† Ïàò ÏóÜÏäµÎãàÎã§.';
}

async function onRecordsTabClick() {
    showBottomNav();
    console.log('üìí Records tab clicked, fetching sessions...');

    const sessions = await fetchExerciseSessions();

    if (!sessions.length) {
        console.warn('‚ö†Ô∏è No exercise sessions found.');
    }

    renderCalendar(sessions); // existing function
}

// üìä Í∏∞Î°ùÌÉ≠ Í∞úÏÑ†: Ïò¨Î∞îÎ•∏ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ìï®ÏàòÎì§
async function fetchUserExerciseRecords() {
    console.log('üîç ÏÇ¨Ïö©Ïûê Ïö¥Îèô Í∏∞Î°ù Ï°∞Ìöå ÏãúÏûë...');
    
    if (!window.currentUserId) {
        console.warn('‚ö†Ô∏è Î°úÍ∑∏Ïù∏ ÏÇ¨Ïö©Ïûê IDÍ∞Ä ÏóÜÏäµÎãàÎã§.');
        return [];
    }

    try {
        const { data, error } = await window.supabaseClient
            .from('exercise_sessions')
            .select(`
                id,
                started_at,
                completed_at,
                exercise_duration,
                completed_sets,
                completed_breaths,
                inhale_resistance,
                exhale_resistance,
                user_feedback,
                is_aborted
            `)
            .eq('user_id', window.currentUserId)
            .not('completed_at', 'is', null)
            .order('started_at', { ascending: false });

        if (error) {
            console.error('‚ùå Ïö¥Îèô Í∏∞Î°ù Ï°∞Ìöå Ïã§Ìå®:', error);
            return [];
        }

        console.log(`‚úÖ ${data?.length || 0}Í∞úÏùò Ïö¥Îèô Í∏∞Î°ù Ï°∞Ìöå ÏôÑÎ£å`);
        return data || [];

    } catch (err) {
        console.error('‚ùå Ïö¥Îèô Í∏∞Î°ù Ï°∞Ìöå Ï§ë Ïò§Î•ò:', err);
        return [];
    }
}

async function fetchAiAdviceForDate(date) {
    console.log(`ü§ñ ${date} ÎÇ†ÏßúÏùò AI Ï°∞Ïñ∏ Ï°∞Ìöå ÏãúÏûë...`);
    
    if (!window.currentUserId || !date) {
        console.warn('‚ö†Ô∏è ÏÇ¨Ïö©Ïûê ID ÎòêÎäî ÎÇ†ÏßúÍ∞Ä ÏóÜÏäµÎãàÎã§.');
        return null;
    }

    try {
        // Ìï¥Îãπ ÎÇ†ÏßúÏùò ÏÑ∏ÏÖòÎì§ Î®ºÏ†Ä Ï∞æÍ∏∞ 
        const startOfDay = `${date}T00:00:00Z`;
        const endOfDay = `${date}T23:59:59Z`;
        
        const { data: sessions, error: sessionError } = await window.supabaseClient
            .from('exercise_sessions')
            .select('id, ai_advice')
            .eq('user_id', window.currentUserId)
            .gte('started_at', startOfDay)
            .lt('started_at', endOfDay)
            .not('completed_at', 'is', null);

        if (sessionError) {
            console.error('‚ùå ÏÑ∏ÏÖò Ï°∞Ìöå Ïã§Ìå®:', sessionError);
            return null;
        }

        if (!sessions?.length) {
            console.log(`‚ÑπÔ∏è ${date} ÎÇ†ÏßúÏóê Ïö¥Îèô Í∏∞Î°ùÏù¥ ÏóÜÏäµÎãàÎã§.`);
            return null;
        }

        // AI Ï°∞Ïñ∏Ïù¥ ÏûàÎäî ÏÑ∏ÏÖò Ï∞æÍ∏∞ (ai_advice Ïª¨Îüº ÏßÅÏ†ë ÏÇ¨Ïö©)
        const sessionWithAdvice = sessions.find(s => s.ai_advice);
        
        if (sessionWithAdvice?.ai_advice) {
            const advice = sessionWithAdvice.ai_advice;
            // JSON Í∞ùÏ≤¥ÏóêÏÑú ÌÖçÏä§Ìä∏ Ï∂îÏ∂ú
            const adviceText = advice.comprehensive_advice || 
                              advice.intensity_analysis || 
                              advice.summary || 
                              'Ïö¥ÎèôÏùÑ ÏôÑÎ£åÌïòÏÖ®ÏäµÎãàÎã§!';
            
            console.log(`‚úÖ ${date} ÎÇ†ÏßúÏùò AI Ï°∞Ïñ∏ Ï°∞Ìöå ÏôÑÎ£å`);
            return adviceText;
        } else {
            console.log(`‚ÑπÔ∏è ${date} ÎÇ†ÏßúÏóê AI Ï°∞Ïñ∏Ïù¥ ÏóÜÏäµÎãàÎã§.`);
            return null;
        }

    } catch (err) {
        console.error('‚ùå AI Ï°∞Ïñ∏ Ï°∞Ìöå Ï§ë Ïò§Î•ò:', err);
        return null;
    }
}

async function fetchRecordSummaryForDate(date) {
    console.log(`üìã ${date} ÎÇ†ÏßúÏùò Ïö¥Îèô ÏöîÏïΩ Ï°∞Ìöå ÏãúÏûë...`);
    
    if (!window.currentUserId || !date) {
        console.warn('‚ö†Ô∏è ÏÇ¨Ïö©Ïûê ID ÎòêÎäî ÎÇ†ÏßúÍ∞Ä ÏóÜÏäµÎãàÎã§.');
        return null;
    }

    try {
        const startOfDay = `${date}T00:00:00Z`;
        const endOfDay = `${date}T23:59:59Z`;
        
        const { data: sessions, error } = await window.supabaseClient
            .from('exercise_sessions')
            .select(`
                completed_sets,
                completed_breaths,
                exercise_duration,
                inhale_resistance,
                exhale_resistance,
                user_feedback,
                started_at,
                completed_at
            `)
            .eq('user_id', window.currentUserId)
            .gte('started_at', startOfDay)
            .lt('started_at', endOfDay)
            .not('completed_at', 'is', null)
            .order('started_at', { ascending: false });

        if (error) {
            console.error('‚ùå Ïö¥Îèô ÏöîÏïΩ Ï°∞Ìöå Ïã§Ìå®:', error);
            return null;
        }

        if (!sessions?.length) {
            console.log(`‚ÑπÔ∏è ${date} ÎÇ†ÏßúÏóê Ïö¥Îèô Í∏∞Î°ùÏù¥ ÏóÜÏäµÎãàÎã§.`);
            return null;
        }

        // Ìï¥Îãπ ÎÇ†ÏßúÏùò Î™®Îì† ÏÑ∏ÏÖòÏùÑ Ìï©Í≥Ñ
        const summary = sessions.reduce((acc, session) => {
            acc.totalSets += session.completed_sets || 0;
            acc.totalBreaths += session.completed_breaths || 0;
            acc.totalDuration += session.exercise_duration || 0;
            acc.sessionCount += 1;
            acc.inhaleResistance = session.inhale_resistance || 0; // ÎßàÏßÄÎßâ Í∞í ÏÇ¨Ïö©
            acc.exhaleResistance = session.exhale_resistance || 0; // ÎßàÏßÄÎßâ Í∞í ÏÇ¨Ïö©
            acc.feedback = session.user_feedback || acc.feedback;
            return acc;
        }, {
            totalSets: 0,
            totalBreaths: 0,
            totalDuration: 0,
            sessionCount: 0,
            inhaleResistance: 0,
            exhaleResistance: 0,
            feedback: null
        });

        console.log(`‚úÖ ${date} ÎÇ†ÏßúÏùò Ïö¥Îèô ÏöîÏïΩ Ï°∞Ìöå ÏôÑÎ£å: ${summary.sessionCount}Í∞ú ÏÑ∏ÏÖò`);
        return summary;

    } catch (err) {
        console.error('‚ùå Ïö¥Îèô ÏöîÏïΩ Ï°∞Ìöå Ï§ë Ïò§Î•ò:', err);
        return null;
    }
}

// Ï†ÑÏó≠ Ìï®ÏàòÎ°ú ÎÖ∏Ï∂ú
window.showBottomNav = showBottomNav;
window.hideBottomNav = hideBottomNav;
window.switchTab = switchTab;
window.selectWorkoutMode = selectWorkoutMode;
window.onRecordsTabClick = onRecordsTabClick;
window.fetchAiAdviceForDate = fetchAiAdviceForDate;
window.renderRecordSummary = renderRecordSummary;
window.fetchUserExerciseRecords = fetchUserExerciseRecords;
window.fetchRecordSummaryForDate = fetchRecordSummaryForDate;

// ÌôîÎ©¥ Ï†ÑÌôò Ìï®Ïàò
function showScreen(screenId) {
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    document.getElementById(screenId).classList.add('active');
    
    // ÌôîÎ©¥Ïóê Îî∞Î•∏ ÌïòÎã® ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Î∞î ÌëúÏãú/Ïà®ÍπÄ Ï≤òÎ¶¨
    const screensWithNav = ['mainScreen', 'workoutModeScreen', 'breathTrainingScreen', 'recordsScreen'];
    const screensWithoutNav = ['exerciseScreen', 'resultScreen', 'feedbackScreen'];
    
    if (screensWithNav.includes(screenId)) {
        showBottomNav();
    } else if (screensWithoutNav.includes(screenId)) {
        hideBottomNav();
    }
}

// Î©îÏù∏ ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô
function goToMain() {
    showScreen('mainScreen');
    resetExercise();
    loadUserData();
}

// ÌïòÎã® ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò ÌÉ≠ Ï†ÑÌôò Ìï®Ïàò
function switchTab(tabName) {
    const screens = document.querySelectorAll('.screen');
    screens.forEach(s => s.classList.remove('active'));

    const newScreen = document.getElementById(
        tabName === 'home' ? 'mainScreen' :
        tabName === 'workout' ? 'workoutModeScreen' :
        tabName === 'records' ? 'recordsScreen' : null
    );
    if (!newScreen) return;

    // Î©îÏù∏/Ïö¥ÎèôÎ™®Îìú ÌÉ≠ÏóêÏÑúÎäî ÌïòÎã® ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Î∞î ÌëúÏãú
    showBottomNav();

    newScreen.classList.add('active');
    
    // ÌÉ≠ Î≤ÑÌäº ÌôúÏÑ±Ìôî ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
    document.querySelectorAll('.nav-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');
    
    // Records ÌÉ≠ ÌÅ¥Î¶≠ Ïãú Îç∞Ïù¥ÌÑ∞ Î°úÎìú
    if (tabName === 'records') {
        onRecordsTabClick();
    }
}

// Ïö¥Îèô Î™®Îìú ÏÑ†ÌÉù Ìï®Ïàò
function selectWorkoutMode(mode) {
    if (mode === 'breathtraining') {
        const screen = document.getElementById('breathTrainingScreen');
        // Î™®Îì† ÌôîÎ©¥ Ïà®ÍπÄ
        document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
        screen.classList.add('active');

        // Ïà®Ìä∏Î†àÏù¥Îãù ÌôîÎ©¥ÏóêÏÑúÎäî ÌïòÎã® ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Î∞î ÌëúÏãú
        showBottomNav();
    }
}

// ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ Î°úÎìú
function loadUserData() {
    const stats = getLocalStats();
    displayUserStats(stats);
    updateChart();
    updateSocialProofData(); // üî• ÏÉàÎ°úÏö¥ Í∏∞Îä•: ÏÇ¨ÌöåÏ†Å Ï¶ùÎ™Ö Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏
}

// Ï†ÄÌï≠ ÏÑ§Ï†ï Í¥ÄÎ¶¨ Ìï®ÏàòÎì§
function loadResistanceSettings() {
    const saved = JSON.parse(localStorage.getItem('resistanceSettings') || '{"inhale": 1, "exhale": 1}');
    resistanceSettings = saved;
    updateResistanceUI();
}

function saveResistanceSettings() {
    localStorage.setItem('resistanceSettings', JSON.stringify(resistanceSettings));
}

function adjustResistance(type, change) {
    const maxLevels = { inhale: 6, exhale: 5 };
    const newLevel = resistanceSettings[type] + change;
    
    if (newLevel >= 1 && newLevel <= maxLevels[type]) {
        resistanceSettings[type] = newLevel;
        saveResistanceSettings();
        updateResistanceUI();
    }
}

function updateResistanceUI() {
    document.getElementById('inhaleLevel').textContent = resistanceSettings.inhale;
    document.getElementById('exhaleLevel').textContent = resistanceSettings.exhale;
    
    updateResistanceScale('inhale', resistanceSettings.inhale);
    updateResistanceScale('exhale', resistanceSettings.exhale);
    
    updateResistanceButtons();
}

function updateResistanceScale(type, level) {
    const scale = document.getElementById(type + 'Scale');
    const dots = scale.querySelectorAll('.dot');
    
    dots.forEach((dot, index) => {
        if (index < level) {
            dot.classList.add('active');
        } else {
            dot.classList.remove('active');
        }
    });
}

function updateResistanceButtons() {
    const inhaleMinusBtn = document.querySelector('.resistance-control:first-child .resistance-btn:first-child');
    const inhalePlusBtn = document.querySelector('.resistance-control:first-child .resistance-btn:last-child');
    const exhaleMinusBtn = document.querySelector('.resistance-control:last-child .resistance-btn:first-child');
    const exhalePlusBtn = document.querySelector('.resistance-control:last-child .resistance-btn:last-child');
    
    inhaleMinusBtn.disabled = resistanceSettings.inhale <= 1;
    inhalePlusBtn.disabled = resistanceSettings.inhale >= 6;
    exhaleMinusBtn.disabled = resistanceSettings.exhale <= 1;
    exhalePlusBtn.disabled = resistanceSettings.exhale >= 5;
}

// ÌîºÎìúÎ∞± ÌôîÎ©¥ Í¥ÄÎ†® Ìï®ÏàòÎì§
function showFeedbackScreen() {
    updateFeedbackScreenContent();
    showScreen('feedbackScreen');
}

function updateFeedbackScreenContent() {
    const title = document.getElementById('feedbackTitle');
    const description = document.getElementById('feedbackDescription');
    
    if (isAborted) {
        title.textContent = 'Ï§ëÎã®ÌïòÏã† Ïù¥Ïú†Î•º ÏïåÎ†§Ï£ºÏÑ∏Ïöî';
        description.textContent = 'Ìä∏Î†àÏù¥ÎãùÏùÑ Ï§ëÎã®ÌïòÍ∏∞ Ï†ÑÍπåÏßÄÏùò Í∞ïÎèÑÎäî Ïñ¥Îñ†ÏÖ®ÎÇòÏöî?';
    } else {
        title.textContent = 'ÏßÄÍ∏à Ìò∏Ìù°ÌïòÎäî ÎäêÎÇåÏù¥ Ïñ¥Îñ†ÏÑ∏Ïöî?';
        description.textContent = 'Î∞©Í∏à ÏôÑÎ£åÌïú Ìä∏Î†àÏù¥ÎãùÏùò Í∞ïÎèÑÎäî Ïñ¥Îñ†ÏÖ®ÎÇòÏöî?';
    }
}

function selectFeedback(feedback) {
    userFeedback = feedback;
    
    gtag('event', 'feedback_selected', {
        feedback_type: feedback,
        completed_sets: window.exerciseData ? window.exerciseData.completedSets : 0,
        is_aborted: isAborted
    });
    
    showResultScreen();
}

// Í≤∞Í≥º ÌôîÎ©¥ Í¥ÄÎ†® Ìï®ÏàòÎì§
async function showResultScreen() {
    try {
        console.log('üìã Í≤∞Í≥º ÌôîÎ©¥ ÌëúÏãú ÏãúÏûë');
        
        showScreen('resultScreen');
        
        const timeData = window.exerciseData.exerciseTime.split(':');
        const minutes = parseInt(timeData[0]);
        const seconds = parseInt(timeData[1]);
        
        // Í≤∞Í≥º ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
        document.getElementById('resistanceInfo').textContent = `${window.exerciseData.resistanceSettings.inhale}/${window.exerciseData.resistanceSettings.exhale}`;
        document.getElementById('totalTime').textContent = `${minutes}Î∂Ñ ${seconds}Ï¥à`;
        document.getElementById('completedSets').textContent = `${window.exerciseData.completedSets}/2`;
        document.getElementById('totalBreathsResult').textContent = `${window.exerciseData.completedBreaths}Ìöå`;
        
        document.getElementById('intensityAdvice').textContent = 'Í∞ïÎèÑ Ï°∞Ï†à Î∂ÑÏÑùÏùÑ ÏßÑÌñâÌïòÍ≥† ÏûàÏäµÎãàÎã§...';
        document.getElementById('comprehensiveAdvice').textContent = 'AI Ïà®Ìä∏Î†àÏù¥ÎÑàÍ∞Ä ÎãπÏã†Ïùò Ìä∏Î†àÏù¥ÎãùÏùÑ Î∂ÑÏÑùÌïòÍ≥† ÏûàÏäµÎãàÎã§...';
        
        const exerciseDataWithFeedback = {
            ...window.exerciseData,
            userFeedback: userFeedback
        };
        
        console.log('üéØ AI Î∂ÑÏÑùÏö© ÏµúÏ¢Ö Îç∞Ïù¥ÌÑ∞:', exerciseDataWithFeedback);
        
        gtag('event', 'exercise_complete', {
            exercise_duration: exerciseDataWithFeedback.exerciseTime,
            completed_sets: exerciseDataWithFeedback.completedSets,
            completed_breaths: exerciseDataWithFeedback.completedBreaths,
            is_aborted: exerciseDataWithFeedback.isAborted,
            user_feedback: exerciseDataWithFeedback.userFeedback,
            inhale_resistance: exerciseDataWithFeedback.resistanceSettings.inhale,
            exhale_resistance: exerciseDataWithFeedback.resistanceSettings.exhale
        });
        
        // üéÆ ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏ Î∞è Î∞∞ÏßÄ Ï≤¥ÌÅ¨
        const updatedStats = updateLocalStats(window.exerciseData);
        addExerciseHistory(exerciseDataWithFeedback);
        
        // üéÆ ÏÉà Î∞∞ÏßÄ Ï≤¥ÌÅ¨ Î∞è ÌëúÏãú
        const newBadges = checkNewBadges(updatedStats);
        updateBadgesDisplay();
        
        // üî• ÏÉàÎ°úÏö¥ Í∏∞Îä•: ÏÇ¨ÌöåÏ†Å Ï¶ùÎ™Ö UI Ï¥àÍ∏∞Ìôî
        updateSocialProofData();
        initReviewsCarousel();
        
        if (newBadges.length > 0) {
            // Ï≤´ Î≤àÏß∏ ÏÉà Î∞∞ÏßÄÎßå ÌåùÏóÖÏúºÎ°ú ÌëúÏãú (Ïó¨Îü¨ Í∞úÎ©¥ ÏàúÏ∞®Ï†ÅÏúºÎ°ú)
            setTimeout(() => {
                showBadgePopup(newBadges[0]);
            }, 1000);
        }
        
        const aiAdvice = await getTrainerAdvice(exerciseDataWithFeedback);
        
        console.log('ü§ñ AI Ï°∞Ïñ∏ Í≤∞Í≥º:', aiAdvice);
        
        // üîÑ ÏÉàÎ°úÏö¥ Í∏∞Îä•: Supabase Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï†ÄÏû• ÌÜµÌï© Ï≤òÎ¶¨
        console.log('üîÑ Supabase Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï†ÄÏû• ÏãúÏûë');
        
        let savedSession = null;
        let savedAdvice = null;
        
        try {
            // 1. Ïö¥Îèô Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
            savedSession = await saveExerciseToDatabase(exerciseDataWithFeedback);
            
            // 2. AI Ï°∞Ïñ∏ Ï†ÄÏû• (ÏÑ∏ÏÖòÏù¥ Ï†ÄÏû•Îêú Í≤ΩÏö∞Îßå)
            if (savedSession && aiAdvice) {
                savedAdvice = await saveAIAdviceToDatabase(savedSession.id, aiAdvice);
            }
            
            console.log('üíæ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï†ÄÏû• ÏôÑÎ£å - ÏÑ∏ÏÖò:', savedSession?.id, 'Ï°∞Ïñ∏:', savedAdvice?.id);
            
        } catch (dbError) {
            console.error('‚ùå Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï†ÄÏû• Ï§ë Ïò§Î•ò (Í∏∞Ï°¥ Í∏∞Îä•ÏóêÎäî ÏòÅÌñ• ÏóÜÏùå):', dbError);
            // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï†ÄÏû• Ïã§Ìå®Ìï¥ÎèÑ Í∏∞Ï°¥ Í∏∞Îä•ÏùÄ Í≥ÑÏÜç ÏûëÎèô
        }
        
        if (typeof aiAdvice === 'object' && aiAdvice.intensityAdvice && aiAdvice.comprehensiveAdvice) {
            handleExerciseResult({
                success: true,
                intensityAdvice: aiAdvice.intensityAdvice,
                comprehensiveAdvice: aiAdvice.comprehensiveAdvice,
                stats: updatedStats,
                savedToDatabase: !!savedSession,
                sessionId: savedSession?.id
            });
        } else if (typeof aiAdvice === 'string') {
            handleExerciseResult({
                success: true,
                intensityAdvice: aiAdvice,
                comprehensiveAdvice: "AI Ìä∏Î†àÏù¥ÎÑàÍ∞Ä ÎãπÏã†Ïùò Íæ∏Ï§ÄÌïú ÎÖ∏Î†•ÏùÑ ÏùëÏõêÌï©ÎãàÎã§!",
                stats: updatedStats,
                savedToDatabase: !!savedSession,
                sessionId: savedSession?.id
            });
        } else {
            throw new Error('AI Ï°∞Ïñ∏ ÌòïÏãù Ïò§Î•ò');
        }
        
        console.log('‚úÖ Í≤∞Í≥º ÌôîÎ©¥ Ï≤òÎ¶¨ ÏôÑÎ£å');
        
    } catch (error) {
        console.error('‚ùå showResultScreen Ïò§Î•ò:', error);
        
        document.getElementById('intensityAdvice').textContent = 'Î∂ÑÏÑùÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.';
        document.getElementById('comprehensiveAdvice').textContent = 'ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ÏùÑ ÌôïÏù∏ÌïòÍ≥† Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.';
        
        const updatedStats = updateLocalStats(window.exerciseData);
        addExerciseHistory(window.exerciseData);
        updateBadgesDisplay();
        updateSocialProofData();
        initReviewsCarousel();
    }
}

// üíæ Supabase Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï†ÄÏû• Ìï®ÏàòÎì§ (Í∏∞Ï°¥ Í∏∞Îä•Ïóê ÏòÅÌñ• ÏóÜÏùå)
async function saveExerciseToDatabase(exerciseData) {
    try {
        console.log('üíæ Supabase Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Ïö¥Îèô Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• ÏãúÏûë:', exerciseData);
        
        const sessionData = {
            user_id: window.currentUserId, // Î°úÍ∑∏Ïù∏Îêú ÏÇ¨Ïö©Ïûê ID
            exercise_date: new Date().toISOString().split('T')[0],
            exercise_time: exerciseData.exerciseTime || '0:00',
            completed_sets: exerciseData.completedSets || 0,
            completed_breaths: exerciseData.completedBreaths || 0,
            total_target_breaths: 20,
            is_aborted: exerciseData.isAborted || false,
            user_feedback: exerciseData.userFeedback || null,
            inhale_resistance: exerciseData.resistanceSettings?.inhale || 1,
            exhale_resistance: exerciseData.resistanceSettings?.exhale || 1
        };

        const response = await fetch(`${SUPABASE_URL}/rest/v1/exercise_sessions`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
                'apikey': SUPABASE_ANON_KEY,
                'Prefer': 'return=representation'
            },
            body: JSON.stringify(sessionData)
        });

        if (!response.ok) {
            throw new Error(`Ï†ÄÏû• Ïã§Ìå®: ${response.status}`);
        }

        const savedSession = await response.json();
        console.log('‚úÖ Ïö¥Îèô Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• ÏôÑÎ£å:', savedSession[0]);
        return savedSession[0];
        
    } catch (error) {
        console.error('‚ùå Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï†ÄÏû• Ïã§Ìå® (Í∏∞Ï°¥ Í∏∞Îä•ÏóêÎäî ÏòÅÌñ• ÏóÜÏùå):', error);
        return null; // Ïã§Ìå®Ìï¥ÎèÑ Ïï±ÏùÄ Í≥ÑÏÜç ÏûëÎèô
    }
}

async function saveAIAdviceToDatabase(sessionId, adviceData) {
    try {
        if (!sessionId || !adviceData) {
            console.log('‚ö†Ô∏è ÏÑ∏ÏÖò ID ÎòêÎäî Ï°∞Ïñ∏ Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå, Ï†ÄÏû• ÏÉùÎûµ');
            return null;
        }

        console.log('ü§ñ AI Ï°∞Ïñ∏ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï†ÄÏû• ÏãúÏûë');
        
        const advice = {
            session_id: sessionId,
            intensity_advice: adviceData.intensityAdvice || '',
            comprehensive_advice: adviceData.comprehensiveAdvice || '',
            summary: null, // Ï∂îÌõÑ Íµ¨ÌòÑ
            gemini_raw_response: adviceData // Ï†ÑÏ≤¥ ÏùëÎãµ Ï†ÄÏû•
        };

        const response = await fetch(`${SUPABASE_URL}/rest/v1/ai_advice`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
                'apikey': SUPABASE_ANON_KEY,
                'Prefer': 'return=representation'
            },
            body: JSON.stringify(advice)
        });

        if (!response.ok) {
            throw new Error(`AI Ï°∞Ïñ∏ Ï†ÄÏû• Ïã§Ìå®: ${response.status}`);
        }

        const savedAdvice = await response.json();
        console.log('‚úÖ AI Ï°∞Ïñ∏ Ï†ÄÏû• ÏôÑÎ£å:', savedAdvice[0]);
        return savedAdvice[0];
        
    } catch (error) {
        console.error('‚ùå AI Ï°∞Ïñ∏ Ï†ÄÏû• Ïã§Ìå® (Í∏∞Ï°¥ Í∏∞Îä•ÏóêÎäî ÏòÅÌñ• ÏóÜÏùå):', error);
        return null;
    }
}

// üéØ Í∞úÏÑ†Îêú Í≤∞Í≥º Ï≤òÎ¶¨ Ìï®Ïàò (Ïä§ÎßàÌä∏ Î∂ÑÏÑù Ï†ÅÏö© + Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï†ÄÏû• ÏÉÅÌÉú Ï≤òÎ¶¨)
function handleExerciseResult(result) {
    addFeedbackHistory(userFeedback, resistanceSettings);
    const analysis = analyzeFeedbackPattern(userFeedback, resistanceSettings);
    
    console.log('üß† Ïä§ÎßàÌä∏ Î∂ÑÏÑù Í≤∞Í≥º:', analysis);
    
    // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï†ÄÏû• ÏÉÅÌÉú Î°úÍπÖ
    if (result.savedToDatabase) {
        console.log('üíæ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï†ÄÏû• ÏôÑÎ£å - ÏÑ∏ÏÖò ID:', result.sessionId);
    } else {
        console.log('üì± Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄ Ï†ÄÏû• Î™®Îìú (Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ Ïã§Ìå®)');
    }
    
    let finalIntensityAdvice = result.intensityAdvice;
    let finalComprehensiveAdvice = result.comprehensiveAdvice;
    
    const additionalAdvice = generateLocalAdviceAddition(analysis, userFeedback, window.exerciseData.isAborted);
    if (additionalAdvice) {
        finalIntensityAdvice += additionalAdvice;
    }
    
    document.getElementById('intensityAdvice').innerHTML = finalIntensityAdvice.replace(/\n/g, '<br>');
    document.getElementById('comprehensiveAdvice').innerHTML = finalComprehensiveAdvice.replace(/\n/g, '<br>');
}

// üî• ÏÉàÎ°úÏö¥ Í∏∞Îä•: Ïä§ÎßàÌä∏ Ïã§ÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
function generateSmartLiveData() {
    const now = getCurrentUserTime();
    const hour = now.getHours();
    const day = now.getDay(); // 0=ÏùºÏöîÏùº
    const baseDate = new Date('2024-01-01'); // Ïï± ÏãúÏûëÏùº
    const daysSinceStart = Math.floor((now - baseDate) / (1000 * 60 * 60 * 24));
    
    // Í∏∞Î≥∏ ÏÇ¨Ïö©Ïûê Ïàò (ÏãúÍ∞ÑÏù¥ ÏßÄÎÇ†ÏàòÎ°ù Ï¶ùÍ∞Ä)
    let baseUsers = 8500 + (daysSinceStart * 15); // ÌïòÎ£®Ïóê 15Î™ÖÏî© Ï¶ùÍ∞Ä
    
    // ÏãúÍ∞ÑÎåÄÎ≥Ñ ÌôúÎèô Ìå®ÌÑ¥
    let hourMultiplier = 1.0;
    if (hour >= 6 && hour <= 9) hourMultiplier = 1.8; // ÏïÑÏπ® ÌîºÌÅ¨
    else if (hour >= 12 && hour <= 14) hourMultiplier = 1.3; // Ï†êÏã¨ ÏãúÍ∞Ñ
    else if (hour >= 18 && hour <= 22) hourMultiplier = 2.2; // Ï†ÄÎÖÅ ÌîºÌÅ¨
    else if (hour >= 23 || hour <= 5) hourMultiplier = 0.4; // ÏÉàÎ≤Ω
    
    // ÏöîÏùºÎ≥Ñ Ìå®ÌÑ¥
    let dayMultiplier = 1.0;
    if (day === 0 || day === 6) dayMultiplier = 0.7; // Ï£ºÎßêÏùÄ 70%
    else if (day >= 1 && day <= 5) dayMultiplier = 1.0; // ÌèâÏùº
    
    // ÎûúÎç§ Î≥ÄÎèô (¬±10%)
    const randomFactor = 0.9 + (Math.random() * 0.2);
    
    const todayActiveUsers = Math.floor(baseUsers * hourMultiplier * dayMultiplier * randomFactor);
    const totalUsers = Math.floor(baseUsers * 1.5); // Ï†ÑÏ≤¥ ÏÇ¨Ïö©ÏûêÎäî Îçî ÎßéÏùå
    
    return {
        todayActive: Math.max(200, todayActiveUsers), // ÏµúÏÜå 200Î™Ö
        totalUsers: Math.max(8000, totalUsers), // ÏµúÏÜå 8000Î™Ö
        isGrowing: daysSinceStart > 0
    };
}

// üî• ÏÉàÎ°úÏö¥ Í∏∞Îä•: ÏÇ¨ÌöåÏ†Å Ï¶ùÎ™Ö UI ÏóÖÎç∞Ïù¥Ìä∏
function updateSocialProofData() {
    const liveData = generateSmartLiveData();
    
    // Î©îÏù∏ÌôîÎ©¥ Ïã§ÏãúÍ∞Ñ ÌòÑÌô© ÏóÖÎç∞Ïù¥Ìä∏
    const mainLiveUsersText = document.getElementById('mainLiveUsersText');
    if (mainLiveUsersText) {
        mainLiveUsersText.textContent = `Ïò§Îäò ${liveData.todayActive.toLocaleString()}Î™Ö Ìä∏Î†àÏù¥Îãù Ï§ë`;
    }
    
    // Í≤∞Í≥ºÌôîÎ©¥ ÏÉÅÏÑ∏ ÌòÑÌô© ÏóÖÎç∞Ïù¥Ìä∏
    const liveUsersCount = document.getElementById('liveUsersCount');
    const totalUsersCount = document.getElementById('totalUsersCount');
    
    if (liveUsersCount) {
        liveUsersCount.textContent = liveData.todayActive.toLocaleString();
    }
    if (totalUsersCount) {
        totalUsersCount.textContent = liveData.totalUsers.toLocaleString();
    }
}

// üî• ÏÉàÎ°úÏö¥ Í∏∞Îä•: Î¶¨Î∑∞ Ïä¨ÎùºÏù¥Îçî ÏÉùÏÑ±
function initReviewsCarousel() {
    const reviewsSlider = document.getElementById('reviewsSlider');
    const carouselDots = document.getElementById('carouselDots');
    
    if (!reviewsSlider || !carouselDots) return;
    
    // Î¶¨Î∑∞ Ïπ¥ÎìúÎì§ ÏÉùÏÑ±
    reviewsSlider.innerHTML = '';
    SOCIAL_PROOF_REVIEWS.forEach((review, index) => {
        const reviewCard = document.createElement('div');
        reviewCard.className = 'review-card';
        reviewCard.innerHTML = `
            <div class="review-text">"${review.text}"</div>
            <div class="review-author">
                <div class="review-avatar">${review.avatar}</div>
                <div class="review-info">
                    <div class="review-name">${review.author}</div>
                    <div class="review-rating">${review.rating}</div>
                </div>
            </div>
        `;
        reviewsSlider.appendChild(reviewCard);
    });
    
    // Ï∫êÎü¨ÏÖÄ Ï†êÎì§ ÏÉùÏÑ±
    carouselDots.innerHTML = '';
    SOCIAL_PROOF_REVIEWS.forEach((_, index) => {
        const dot = document.createElement('div');
        dot.className = `carousel-dot ${index === 0 ? 'active' : ''}`;
        dot.addEventListener('click', () => goToReview(index));
        carouselDots.appendChild(dot);
    });
    
    // ÏûêÎèô Ïä¨ÎùºÏù¥Îìú ÏãúÏûë
    startReviewCarousel();
    
    // GA Ïù¥Î≤§Ìä∏: ÏÇ¨ÌöåÏ†Å Ï¶ùÎ™Ö ÎÖ∏Ï∂ú
    gtag('event', 'social_proof_impression', {
        total_reviews: SOCIAL_PROOF_REVIEWS.length,
        current_live_users: generateSmartLiveData().todayActive
    });
}

// üî• ÏÉàÎ°úÏö¥ Í∏∞Îä•: Î¶¨Î∑∞ Ï∫êÎü¨ÏÖÄ ÏûêÎèô Ïû¨ÏÉù
function startReviewCarousel() {
    if (reviewCarouselInterval) {
        clearInterval(reviewCarouselInterval);
    }
    
    reviewCarouselInterval = setInterval(() => {
        currentReviewIndex = (currentReviewIndex + 1) % SOCIAL_PROOF_REVIEWS.length;
        goToReview(currentReviewIndex);
    }, 4000); // 4Ï¥àÎßàÎã§ Î≥ÄÍ≤Ω
}

// üî• ÏÉàÎ°úÏö¥ Í∏∞Îä•: ÌäπÏ†ï Î¶¨Î∑∞Î°ú Ïù¥Îèô
function goToReview(index) {
    const reviewsSlider = document.getElementById('reviewsSlider');
    const carouselDots = document.getElementById('carouselDots');
    
    if (!reviewsSlider || !carouselDots) return;
    
    currentReviewIndex = index;
    
    // Ïä¨ÎùºÏù¥Îçî Ïù¥Îèô
    reviewsSlider.style.transform = `translateX(-${index * 100}%)`;
    
    // Ï†ê ÌôúÏÑ±Ìôî ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
    carouselDots.querySelectorAll('.carousel-dot').forEach((dot, i) => {
        if (i === index) {
            dot.classList.add('active');
        } else {
            dot.classList.remove('active');
        }
    });
    
    // GA Ïù¥Î≤§Ìä∏: Î¶¨Î∑∞ Ï°∞Ìöå
    gtag('event', 'review_view', {
        review_index: index,
        review_author: SOCIAL_PROOF_REVIEWS[index].author
    });
}

// üéØ Ïä§ÎßàÌä∏ Ï°∞Ïñ∏ ÏÉùÏÑ±
function generateLocalAdviceAddition(analysis, currentFeedback, isAborted) {
    let additionalAdvice = '';
    
    if (!isAborted) {
        if (analysis.readyForChallenge) {
            additionalAdvice += '<br><br><strong>üöÄ Ïû•Í∏∞ Î∂ÑÏÑù</strong><br>1Ï£ºÏùºÍ∞Ñ Íæ∏Ï§ÄÌûà Ï†ÅÎãπÌïú Í∞ïÎèÑÎ•º Ïú†ÏßÄÌïòÏÖ®ÎÑ§Ïöî!<br>Ïù¥Ï†ú Ìïú Îã®Í≥Ñ ÎèÑÏ†ÑÌï¥Î≥¥ÏãúÍ≤†Ïñ¥Ïöî?';
        } else if (analysis.shouldIncrease) {
            additionalAdvice += '<br><br><strong>‚¨ÜÔ∏è ÏßÑÌñâ Îã®Í≥Ñ</strong><br>Ïó∞ÏÜçÏúºÎ°ú Ïâ¨Ïö∞ÏÖ®ÏúºÎãà Ï†ÄÌï≠ÏùÑ Ïò¨Î†§Î≥¥ÏÑ∏Ïöî!';
        } else if (analysis.hasProgressed) {
            additionalAdvice += '<br><br><strong>üåü Ïã§Î†• Ìñ•ÏÉÅ</strong><br>Ï†ÅÎãπÌñàÎçò Í∞ïÎèÑÍ∞Ä Ïù¥Ï†ú Ïâ¨ÏõåÏ°åÎÑ§Ïöî!<br>ÏÑ±Ïû•ÌïòÍ≥† Í≥ÑÏã≠ÎãàÎã§!';
        } else if (analysis.hasImproved) {
            additionalAdvice += '<br><br><strong>üí™ ÌöåÎ≥µ ÏôÑÎ£å</strong><br>ÌûòÎì§Îçò Í∞ïÎèÑÍ∞Ä Ïù¥Ï†ú Ï†ÅÎãπÌï¥Ï°åÏñ¥Ïöî!<br>Ï¢ãÏùÄ Ï†ÅÏùëÎ†•Ïù¥ÎÑ§Ïöî!';
        }
    } else {
        if (analysis.needsDecrease) {
            additionalAdvice += '<br><br><strong>üõ°Ô∏è ÏïàÏ†Ñ Ïö∞ÏÑ†</strong><br>Î¨¥Î¶¨ÌïòÏßÄ ÎßàÏãúÍ≥† Í∞ïÎèÑÎ•º ÎÇÆÏ∂∞Î≥¥ÏÑ∏Ïöî.<br>Íæ∏Ï§ÄÌï®Ïù¥ Îçî Ï§ëÏöîÌï¥Ïöî!';
        } else if (analysis.totalHistory >= 5) {
            additionalAdvice += '<br><br><strong>üíô Í≥ÑÏÜç ÎèÑÏ†Ñ</strong><br>Í∑∏ÎèôÏïà Íæ∏Ï§ÄÌûà ÌïòÏã† Î™®ÏäµÏù¥ Î©ãÏ†∏Ïöî!<br>Ïª®ÎîîÏÖò Ï¢ãÏùÑ Îïå Îã§Ïãú Ìï¥Î¥êÏöî!';
        }
    }
    
    return additionalAdvice;
}

// üîß AI Ï°∞Ïñ∏ ÏöîÏ≤≠
async function getTrainerAdvice(exerciseData) {
    try {
        console.log('ü§ñ Supabase AI Ï°∞Ïñ∏ ÏöîÏ≤≠ ÏãúÏûë');
        console.log('üìä Ï†ÑÎã¨Ìï† Ïö¥Îèô Îç∞Ïù¥ÌÑ∞:', exerciseData);
        
        const requestBody = {
            exerciseData: {
                resistanceSettings: {
                    inhale: exerciseData.resistanceSettings ? exerciseData.resistanceSettings.inhale : 1,
                    exhale: exerciseData.resistanceSettings ? exerciseData.resistanceSettings.exhale : 1
                },
                userFeedback: exerciseData.userFeedback || null,
                completedSets: exerciseData.completedSets || 0,
                completedBreaths: exerciseData.completedBreaths || 0,
                exerciseTime: exerciseData.exerciseTime || '0:00',
                isAborted: exerciseData.isAborted || false
            },
            sessionId: 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9)
        };
        
        console.log('üåê Supabase ÏöîÏ≤≠ Îç∞Ïù¥ÌÑ∞:', requestBody);
        
        const response = await fetch(`${SUPABASE_URL}/functions/v1/ai-advice`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(requestBody)
        });
        
        if (!response.ok) {
            throw new Error(`Supabase Ïó∞Í≤∞ Ïò§Î•ò: ${response.status}`);
        }
        
        const result = await response.json();
        console.log('üì¶ Supabase ÏùëÎãµ:', result);
        
        if (result.success && result.advice) {
            return {
                intensityAdvice: result.advice.intensityAdvice || result.advice,
                comprehensiveAdvice: result.advice.comprehensiveAdvice || "AI Ìä∏Î†àÏù¥ÎÑàÍ∞Ä ÎãπÏã†Ïùò Íæ∏Ï§ÄÌïú ÎÖ∏Î†•ÏùÑ ÏùëÏõêÌï©ÎãàÎã§!"
            };
        }
        
        throw new Error(result.message || 'AI Ï°∞Ïñ∏ ÏÉùÏÑ± Ïã§Ìå®');
        
    } catch (error) {
        console.error('üö® Supabase AI Ï°∞Ïñ∏ ÏöîÏ≤≠ Ïò§Î•ò:', error);
        
        const defaultAdvices = [
            `${exerciseData.completedSets}ÏÑ∏Ìä∏ ÏôÑÏ£º! Ïà®Ìä∏Ïùò Ï†ÄÌï≠ÏùÑ Ïù¥Í≤®ÎÇ¥Î©∞ Ìò∏Ìù°Í∑ºÏù¥ ÌïúÏ∏µ Í∞ïÌï¥Ï°åÏäµÎãàÎã§.`,
            `${exerciseData.exerciseTime} ÎèôÏïàÏùò ÏßëÏ§ëÏ†ÅÏù∏ Ìò∏Ìù° Ìä∏Î†àÏù¥Îãù, ÏàòÍ≥†ÌïòÏÖ®ÏäµÎãàÎã§!`,
            `Ìò∏Ìù°Í∑ºÏú° Í∞ïÌôî Ïó¨Ï†ïÏóêÏÑú Îòê Ìïú Í±∏Ïùå Ï†ÑÏßÑÌïòÏÖ®ÎÑ§Ïöî!`
        ];
        
        const randomIndex = Math.floor(Math.random() * defaultAdvices.length);
        return {
            intensityAdvice: defaultAdvices[randomIndex],
            comprehensiveAdvice: "Íæ∏Ï§ÄÌûà ÎèÑÏ†ÑÌïòÎäî ÏùòÏßÄÍ∞Ä Ï†ïÎßê ÎåÄÎã®Ìï¥Ïöî!"
        };
    }
}

// üéØ ÌîºÎìúÎ∞± ÌûàÏä§ÌÜ†Î¶¨ Í¥ÄÎ¶¨ Ìï®Ïàò (Ïä§ÎßàÌä∏ Î∂ÑÏÑùÏö©)
function getFeedbackHistory() {
    return JSON.parse(localStorage.getItem('feedbackHistory') || '[]');
}

function addFeedbackHistory(feedback, resistanceSettings) {
    const history = getFeedbackHistory();
    const today = getCurrentUserTime().toDateString();
    const currentHour = getCurrentUserTime().getHours();
    const timeOfDay = currentHour < 14 ? 'morning' : 'afternoon';
    
    const newRecord = {
        date: today,
        timeOfDay: timeOfDay,
        feedback: feedback,
        inhaleLevel: resistanceSettings.inhale,
        exhaleLevel: resistanceSettings.exhale,
        timestamp: getCurrentUserTime().toISOString()
    };
    
    history.unshift(newRecord);
    
    if (history.length > 60) {
        history.splice(60);
    }
    
    localStorage.setItem('feedbackHistory', JSON.stringify(history));
    return history;
}

// üéØ Ïä§ÎßàÌä∏ ÌîºÎìúÎ∞± Ìå®ÌÑ¥ Î∂ÑÏÑù
function analyzeFeedbackPattern(currentFeedback, resistanceSettings) {
    const history = getFeedbackHistory();
    
    let consecutivePerfectCount = 0;
    let consecutiveEasyCount = 0;
    let consecutiveHardCount = 0;
    
    if (currentFeedback === 'perfect') {
        consecutivePerfectCount = 1;
    } else if (currentFeedback === 'easy') {
        consecutiveEasyCount = 1;
    } else if (currentFeedback === 'hard') {
        consecutiveHardCount = 1;
    }
    
    for (let record of history) {
        if (currentFeedback === 'perfect' && record.feedback === 'perfect') {
            consecutivePerfectCount++;
        } else if (currentFeedback === 'easy' && record.feedback === 'easy') {
            consecutiveEasyCount++;
        } else if (currentFeedback === 'hard' && record.feedback === 'hard') {
            consecutiveHardCount++;
        } else {
            break;
        }
    }
    
    const previousFeedback = history.length > 0 ? history[0].feedback : null;
    
    return {
        consecutivePerfectCount: consecutivePerfectCount,
        consecutiveEasyCount: consecutiveEasyCount,
        consecutiveHardCount: consecutiveHardCount,
        previousFeedback: previousFeedback,
        hasImproved: previousFeedback === 'hard' && currentFeedback === 'perfect',
        hasProgressed: previousFeedback === 'perfect' && currentFeedback === 'easy',
        readyForChallenge: consecutivePerfectCount >= 14,
        shouldIncrease: consecutiveEasyCount >= 3,
        needsDecrease: consecutiveHardCount >= 2,
        totalHistory: history.length
    };
}

// üé¨ Ïò®Î≥¥Îî© ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Ìï®ÏàòÎì§
function nextOnboardingStep() {
    document.getElementById('onboardingStep1').style.display = 'none';
    document.getElementById('onboardingStep2').style.display = 'flex';
    
    gtag('event', 'onboarding_next', {
        step: 1
    });
}

function skipOnboarding() {
    hideIntro();
    
    gtag('event', 'onboarding_skip', {
        step: document.getElementById('onboardingStep1').style.display === 'none' ? 2 : 1
    });
}

// üî• ÏÉàÎ°úÏö¥ Í∏∞Îä•: Ïä§ÏôÄÏù¥ÌîÑ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò
let touchStartX = 0;
let touchEndX = 0;
let isOnboarding = true;

function handleSwipeGesture() {
    const swipeThreshold = 50; // ÏµúÏÜå Ïä§ÏôÄÏù¥ÌîÑ Í±∞Î¶¨ (ÌîΩÏÖÄ)
    const swipeDistance = touchEndX - touchStartX;
    
    // ÏôºÏ™Ω Ïä§ÏôÄÏù¥ÌîÑ (Îã§ÏùåÏúºÎ°ú)
    if (swipeDistance < -swipeThreshold) {
        const step1 = document.getElementById('onboardingStep1');
        const step2 = document.getElementById('onboardingStep2');
        
        if (step1 && step1.style.display !== 'none') {
            // Ï≤´ Î≤àÏß∏ ÌôîÎ©¥ ‚Üí Îëê Î≤àÏß∏ ÌôîÎ©¥
            nextOnboardingStep();
            
            gtag('event', 'onboarding_swipe', {
                action: 'next',
                step: 1
            });
        } else if (step2 && step2.style.display !== 'none') {
            // Îëê Î≤àÏß∏ ÌôîÎ©¥ ‚Üí Î©îÏù∏ ÌôîÎ©¥
            skipOnboarding();
            
            gtag('event', 'onboarding_swipe', {
                action: 'finish',
                step: 2
            });
        }
    }
    
    // Ïò§Î•∏Ï™Ω Ïä§ÏôÄÏù¥ÌîÑ (Ïù¥Ï†ÑÏúºÎ°ú)
    else if (swipeDistance > swipeThreshold) {
        const step2 = document.getElementById('onboardingStep2');
        
        if (step2 && step2.style.display !== 'none') {
            // Îëê Î≤àÏß∏ ÌôîÎ©¥ ‚Üí Ï≤´ Î≤àÏß∏ ÌôîÎ©¥
            document.getElementById('onboardingStep2').style.display = 'none';
            document.getElementById('onboardingStep1').style.display = 'flex';
            
            gtag('event', 'onboarding_swipe', {
                action: 'back',
                step: 2
            });
        }
    }
}

// Ïò®Î≥¥Îî© ÌôîÎ©¥Ïóê ÌÑ∞Ïπò Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï∂îÍ∞Ä
function initializeOnboardingSwipe() {
    const introScreen = document.getElementById('introScreen');
    
    if (introScreen) {
        // ÌÑ∞Ïπò ÏãúÏûë
        introScreen.addEventListener('touchstart', (e) => {
            if (isOnboarding) {
                touchStartX = e.changedTouches[0].screenX;
            }
        }, { passive: true });
        
        // ÌÑ∞Ïπò Ï¢ÖÎ£å
        introScreen.addEventListener('touchend', (e) => {
            if (isOnboarding) {
                touchEndX = e.changedTouches[0].screenX;
                handleSwipeGesture();
            }
        }, { passive: true });
        
        // ÎßàÏö∞Ïä§ ÏßÄÏõê (Îç∞Ïä§ÌÅ¨ÌÜ± ÌÖåÏä§Ìä∏Ïö©)
        let mouseStartX = 0;
        
        introScreen.addEventListener('mousedown', (e) => {
            if (isOnboarding) {
                mouseStartX = e.clientX;
            }
        });
        
        introScreen.addEventListener('mouseup', (e) => {
            if (isOnboarding) {
                touchStartX = mouseStartX;
                touchEndX = e.clientX;
                handleSwipeGesture();
            }
        });
    }
}

// hideIntro Ìï®Ïàò ÏàòÏ†ï (Ïò®Î≥¥Îî© Ï¢ÖÎ£å Ïãú Ïä§ÏôÄÏù¥ÌîÑ ÎπÑÌôúÏÑ±Ìôî)
function hideIntro() {
    isOnboarding = false; // Ïä§ÏôÄÏù¥ÌîÑ ÎπÑÌôúÏÑ±Ìôî
    
    const introScreen = document.getElementById('introScreen');
    introScreen.classList.add('hidden');
    setTimeout(() => {
        introScreen.style.display = 'none';
    }, 800);
}

// üé¨ ÌéòÏù¥ÏßÄ Ï¥àÍ∏∞Ìôî
window.onload = function() {
    loadUserData();
    loadResistanceSettings();
    updateBadgesDisplay();
    
    // üî• ÏÉàÎ°úÏö¥ Í∏∞Îä•: ÌéòÏù¥ÏßÄ Î°úÎìúÏãú ÏÇ¨ÌöåÏ†Å Ï¶ùÎ™Ö Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏
    updateSocialProofData();
    
    // üî• ÏÉàÎ°úÏö¥ Í∏∞Îä•: Î©îÏù∏ÌôîÎ©¥ Ïã§ÏãúÍ∞Ñ ÌòÑÌô© Ï£ºÍ∏∞Ï†Å ÏóÖÎç∞Ïù¥Ìä∏ (2Î∂ÑÎßàÎã§)
    setInterval(() => {
        updateSocialProofData();
    }, 120000);
    
    // üî• ÏÉàÎ°úÏö¥ Í∏∞Îä•: Ïò®Î≥¥Îî© Ïä§ÏôÄÏù¥ÌîÑ Ï¥àÍ∏∞Ìôî
    initializeOnboardingSwipe();
};

// Service Worker Îì±Î°ù
if ('serviceWorker' in navigator) {
    window.addEventListener('load', function() {
        navigator.serviceWorker.register('/sw.js')
            .then(function(registration) {
                console.log('‚úÖ ServiceWorker Îì±Î°ù ÏÑ±Í≥µ:', registration.scope);
                registration.update();
            })
            .catch(function(error) {
                console.log('‚ùå ServiceWorker Îì±Î°ù Ïã§Ìå®:', error);
            });
    });
}
